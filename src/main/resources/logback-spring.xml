<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds">

	<!--<include resource="org/springframework/boot/logging/logback/base.xml" />-->
	<springProperty scope="context" name="applicationName"
					source="spring.application.name" defaultValue="inspection-client"/>
	<springProperty scope="context" name="loggingPath"
					source="logging.path" defaultValue="./logs"/>
	<!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->

	<property name="log.path" value="${loggingPath}/${applicationName}" />

	<!-- 彩色日志 -->
	<!-- 彩色日志依赖的渲染类 -->
	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
	<conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
	<!-- 彩色日志格式 -->
	<property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39} %M:%line){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
	<property name="FILE_LOG_PATTERN" value="${FILE_LOG_PATTERN:-%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} %M:%line : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
	<!--<property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(-&#45;&#45;){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39} %M:%line){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>-->
	<!--<property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %thread %-5level %X{ip} %logger{39} %msg%n"/>-->

	<!--输出到控制台-->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
		<!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
		<!--<level>info</level>-->
		<!--</filter>-->
		<encoder>
			<Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
			<!-- 设置字符集 -->
			<charset>UTF-8</charset>
		</encoder>
	</appender>


	<!--输出到文件-->

	<!-- 时间滚动输出 level为 DEBUG 日志 -->
	<appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${log.path}/log_debug.log</file>
		<!--日志文件输出格式-->
		<encoder>
			<pattern>${FILE_LOG_PATTERN}</pattern>
			<charset>UTF-8</charset> <!-- 设置字符集 -->
		</encoder>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日志归档 -->
			<fileNamePattern>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数-->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录debug级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>debug</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 时间滚动输出 level为 INFO 日志 -->
	<appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${log.path}/log_info.log</file>
		<!--日志文件输出格式-->
		<encoder>
			<pattern>${FILE_LOG_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 每天日志归档路径以及格式 -->
			<fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数-->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 时间滚动输出 level为 WARN 日志 -->
	<appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${log.path}/log_warn.log</file>
		<!--日志文件输出格式-->
		<encoder>
			<pattern>${FILE_LOG_PATTERN}</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数-->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录warn级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>warn</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>


	<!-- 时间滚动输出 level为 ERROR 日志 -->
	<appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${log.path}/log_error.log</file>
		<!--日志文件输出格式-->
		<encoder>
			<pattern>${FILE_LOG_PATTERN}</pattern>
			<charset>UTF-8</charset> <!-- 此处设置字符集 -->
		</encoder>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>100MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数-->
			<maxHistory>15</maxHistory>
		</rollingPolicy>
		<!-- 此日志文件只记录ERROR级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
        以及指定<appender>。<logger>仅有一个name属性，
        一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
    -->
	<!--<logger name="org.springframework.web" level="info"/>-->
	<!--<logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>-->
	<!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
     -->


	<!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->

	<!--开发环境:打印控制台-->
	<!--<springProfile name="dev">
    </springProfile>-->

	<Logger name="org.crazycake.shiro" level="warn"/>
	<Logger name="springfox" level="warn"/>
	<Logger name="io.undertow" level="warn"/>
	<Logger name="com.alibaba" level="warn"/>
	<Logger name="org.xnio" level="warn"/>
	<Logger name="io.seata" level="warn"/>
	<Logger name="io.buji" level="warn"/>
	<Logger name="org.pac4j" level="warn"/>
	<Logger name="springfox.documentation" level="warn"/>
	<Logger name="io.lettuce" level="warn"/>
	<Logger name="io.netty" level="warn"/>
	<Logger name="org.quartz" level="warn"/>
	<Logger name="reactor" level="warn"/>

	<Logger name="liquibase" level="warn"/>
	<Logger name="liquibase.util.MD5Util" level="warn"/>
	<Logger name="liquibase.executor.jvm.JdbcExecutor" level="warn"/>
	<Logger name="liquibase.changelog.ChangeSet" level="warn"/>
	<Logger name="liquibase.database.core" level="warn"/>
	<Logger name="liquibase.servicelocator.CustomResolverServiceLocator" level="warn"/>
	<Logger name="liquibase.changelog.visitor.UpdateVisitor" level="warn"/>
	<Logger name="org.springframework" level="warn" />
	<Logger name="org.springframework.boot.web.embedded.tomcat.TomcatWebServer" level="debug" />
	<!--    <Logger name="org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener" level="debug" />-->
	<Logger name="org.apache" level="warn" />
	<Logger name="org.apache.shiro" level="warn" />
	<Logger name="net.sf.ehcache" level="warn" />
	<Logger name="org.hibernate.validator" level="warn" />
	<Logger name="org.apache.catalina.startup.DigesterFactory" level="error" />
	<Logger name="org.apache.catalina.util.LifecycleBase" level="error" />
	<Logger name="org.apache.coyote.http11.Http11NioProtocol" level="warn" />
	<logger name="org.apache.sshd.common.util.SecurityUtils" level="warn"/>
	<Logger name="org.apache.tomcat.util.net.NioSelectorPool" level="warn" />
	<Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error" />
	<Logger name="org.hibernate.validator.internal.util.Version" level="warn" />
	<logger name="org.springframework.boot.actuate.endpoint.jmx" level="warn"/>
	<Logger name="org.crsh.plugin" level="warn" />
	<logger name="org.crsh.ssh" level="warn"/>
	<Logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="error" />
	<Logger name="org.hibernate.validator.internal.util.Version" level="warn" />
	<logger name="org.thymeleaf" level="warn"/>
	<logger name="org.flywaydb" level="warn"/>
	<logger name="com.alibaba.druid" level="warn"/>
	<logger name="org.mybatis.spring" level="WARN"/>
	<logger name="freemarker.cache" level="WARN"/>
	<logger name="com.baomidou.mybatisplus.core.MybatisConfiguration" level="WARN"/>
	<logger name="org.apache.ibatis.io.ResolverUtil" level="WARN"/>
	<logger name="springfox.documentation" level="WARN"/>

	<logger name="org.springframework.jdbc.core.JdbcTemplate" level="DEBUG"/>
	<logger name="org.springframework.jdbc.core.StatementCreatorUtils" level="Trace"/>

	<root level="debug">
		<appender-ref ref="CONSOLE" />
		<appender-ref ref="DEBUG_FILE" />
		<appender-ref ref="INFO_FILE" />
		<appender-ref ref="WARN_FILE" />
		<appender-ref ref="ERROR_FILE" />
	</root>

	<!--生产环境:输出到文件-->
	<springProfile name="prod">
		<root level="info">
			<appender-ref ref="CONSOLE"/>
			<appender-ref ref="DEBUG_FILE"/>
			<appender-ref ref="INFO_FILE"/>
			<appender-ref ref="ERROR_FILE"/>
			<appender-ref ref="WARN_FILE"/>
		</root>
	</springProfile>

</configuration>
